#!/bin/bash

minishift::description() {
    echo "Initialize and manage a Minishift developer environment"
}

minishift::usage() {
    cat <<EOT
    --install                 Install templates to a running Minishift.
-p  --project                 Install into this project. Delete this project if
    --reset                   Reset the minishift installation by
                              'minishift delete && minishift start'.
    --full-reset              Full reset by
                              'minishift stop && rm -rf ~/.minishift && minishift start'
    --memory <mem>            How much memory to use when doing a reset. Default: 4GB
    --cpus <nr cpus>          How many CPUs to use when doing a reset. Default: 2
    --disk-size <size>        How many disk space to use when doing a reset. Default: 20GB
    --show-logs               Show minishift logs during startup
    --openshift-version <ver> Set OpenShift version to use when reseting (default: v3.6.0)
                              already existing for --install.
                              Default project: "syndesis"
-i  --image-mode <mode>       Which templates to install: "docker" for plain images,
                              "openshift" for image streams (default: "openshift")
-o  --open                    Open Syndesis in the browser
EOT
}


minishift::run() {
    if [ $(hasflag --open -o) ]; then
        open_url "$(minishift openshift service syndesis-oauthproxy --url)"
    fi
    if [ $(hasflag --full-reset) ] || [ $(hasflag --reset) ]; then
        # Only warning if minishift is not installed
        minishift delete --clear-cache --force
        if [ $(hasflag --full-reset) ] && [ -d ~/.minishift ]; then
            rm -rf ~/.minishift
        fi
        local memory=$(readopt --memory)
        local cpus=$(readopt --cpus)
        local disksize=$(readopt --disk-size)
        local show_logs_arg=""
        local openshift_version=$(readopt --openshift-version)
        if [ $(hasflag --show-logs --show-log) ]; then
            show_logs_args="--show-libmachine-logs=true "
        fi
        minishift start ${show_logs_arg:- }--memory ${memory:-4912} --cpus ${cpus:-2} --disk-size ${disksize:-20GB} --openshift-version ${openshift_version:-v3.6.0}
    fi

    if [ $(hasflag --install) ]; then

        # Switch to minishift to be safe when deleting projects
        oc config use-context minishift

        local project=$(readopt --project -p)
        if [ -n "${project}" ]; then
            recreate_project $project
        fi

        basedir=$(appdir)
        check_error "$basedir"
        oc create -f ${basedir}/deploy/support/serviceaccount-as-oauthclient-restricted.yml
        local template="syndesis-restricted"
        local image_mode=$(readopt --image-mode -i)
        if [ "$image_mode" == "docker" ] || [ $(hasflag --docker) ]; then
            template="syndesis-dev-restricted"
        fi
        oc create -f ${basedir}/deploy/$template.yml
        oc new-app $template \
          -p ROUTE_HOSTNAME="syndesis.$(minishift ip).nip.io" \
          -p OPENSHIFT_MASTER="$(oc whoami --show-server)" \
          -p OPENSHIFT_PROJECT="$(oc project -q)" \
          -p OPENSHIFT_OAUTH_CLIENT_SECRET=$(oc sa get-token syndesis-oauth-client)

        if [ ${template} = "syndesis-restricted" ]; then
          # Wait a bit to start image fetching
          # Patch imagestreams from "DockerImage" to "ImageStreamTag"
          oc get pods -w &
          watch_pid=$!
          for dc in "syndesis-rest" "syndesis-ui" "syndesis-verifier"; do
              echo "Waiting for $dc to be started"
              local replicas="$(oc get dc $dc -o jsonpath='{.status.availableReplicas}')"
              while [ "$replicas" -lt 1 ]; do
                  echo "Sleeping 10s ..."
                  sleep 10
                  replicas=$(oc get dc $dc -o jsonpath="{.status.availableReplicas}")
              done
          done
          kill $watch_pid
          for is in "syndesis-rest" "syndesis-ui" "syndesis-verifier" "syndesis-s2i"; do
              echo "Patching imagestream $is"
              local replace_kind='{"op": "replace", "path": "/spec/tags/0/from/kind", "value": "ImageStreamTag"}'
              local replace_name="{\"op\": \"replace\", \"path\": \"/spec/tags/0/from/name\", \"value\": \"$is:latest\"}"
              local remove_import_policy='{"op": "remove", "path": "/spec/tags/0/importPolicy"}'
              oc patch is $is --type json -p="[$replace_kind, $replace_name, $remove_import_policy]"
          done
        fi
    fi
}

recreate_project() {
    # Delete project if existing
    if oc get project "${project}" >/dev/null 2>&1 ; then
        echo "Deleting project ${project}"
        oc delete project "${project}"
    fi

    # Create project afresh
    echo "Creating project ${project}"
    for i in {1..10}; do
        if oc new-project "${project}" >/dev/null 2>&1 ; then
            break
        fi
        echo "Project still exists. Sleeping 10s ..."
        sleep 10
    done
    oc project "${project}"
}
